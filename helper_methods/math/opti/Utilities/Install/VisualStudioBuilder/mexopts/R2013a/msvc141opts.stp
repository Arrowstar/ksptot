
sub msvc141opts 
{
    my $input = shift;
    my $default_location = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community";
    my $sdk_loc = "";
    my $registry_lookup_fcn = $input->{"registry_lookup"};
	my $sdk_ver_suffix = ".0"; # for some reason the registry doesn't store this version :(
		
	# Attempt to find the Windows sdk that corresponds to VS2017
	my $findSDKExec = sub 
	{
		
		my $sdk_dir = &$registry_lookup_fcn("SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\v10.0" , "InstallationFolder");
		my $sdk_ver = &$registry_lookup_fcn("SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\v10.0" , "ProductVersion");
		my $sdk_loc = $sdk_dir . "bin\\$sdk_ver" . $sdk_ver_suffix;
		if ($sdk_dir eq "" || $sdk_ver eq "" || !-e "$sdk_loc\\x64\\mt.exe")
		{
			my $sdk_dir = &$registry_lookup_fcn("SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0" , "InstallationFolder");
			my $sdk_ver = &$registry_lookup_fcn("SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0" , "ProductVersion");
			$sdk_loc = $sdk_dir . "bin\\$sdk_ver" . $sdk_ver_suffix;
			if ($sdk_dir eq "" || $sdk_ver eq "" || !-e "$sdk_loc\\x64\\mt.exe")
			{
				return ""; # no luck
			}
		}
		return $sdk_loc;
	};
	
	# Attempt to read the version of the compiler
	my $readCompilerLoc = sub
	{
		my $candidate_location = shift;
		my $toolVersionTxt = "VC\\Auxiliary\\Build\\Microsoft.VCToolsVersion.default.txt";			
		if ($candidate_location ne "")
		{
			#Attempt to read the location of the compiler
			my $filename = "$candidate_location\\$toolVersionTxt";
			if (open(my $fh, '<:encoding(UTF-8)', $filename))
			{
				if (my $toolsVer = <$fh>)
				{
					chomp $toolsVer;	
					my $toolsVerTrim = $toolsVer; #substr $toolsVer, 0, -1;
					my $compilerLoc = "$candidate_location\\VC\\Tools\\MSVC\\$toolsVerTrim";
					if ($toolsVerTrim ne ""	&&  -e "$compilerLoc\\bin\\HostX64\\x64\\cl.exe") 
					{ 	
						return $compilerLoc;
					}
				}
			}
		}
		return "";
	};
	
	# Read in the SDK directory
	my $sdk_dir = &$findSDKExec();

    my @language_handled = ('C');
    my $locate_fcn = sub {
        my @valid_locations = ();
        my $env_location;
        my $registry_location;
        my $candidate_location;

        my $is_valid_root_fcn = sub {
            #===================================================================
            # is_valid_root_fcn: Validates the version and file structure of the
            # candidate_location.
            #
            # VS2017 hides the cl.exe in a version specific folder, attempt to find it
            #===================================================================

            my $candidate_location = shift;
            my $isvalid = 0;		
			my $compiler_location = &$readCompilerLoc($candidate_location);
            if ($candidate_location ne "" && $compiler_location ne "")
			{
				# Check our executables exist
				if (-e "$compiler_location\\bin\\HostX64\\x64\\cl.exe" && -e "$candidate_location\\Common7\\IDE\\devenv.exe" ) 
				{ 	
					# Check we have the right version
					if (&correct_version("$compiler_location\\bin\\HostX64\\x64\\cl.exe","19.13"))
					{ 
						$isvalid = 1;
					}
					
				}
			}
            return $isvalid;
        };

        # Search the default environment variable location.               
        $env_location = $ENV{'VS2017INSTALLDIR'}; 
        $env_location =~ s|\\+Common7\\+Tools\\*$||i; 
        $candidate_location = $env_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, &$readCompilerLoc($candidate_location));
        }

        # Search the registry. 
        $registry_location = &$registry_lookup_fcn("SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS7\\", "15.0");
        $candidate_location = $registry_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, &$readCompilerLoc($candidate_location));
        }
		
		$registry_location = &$registry_lookup_fcn("SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7\\", "15.0");
        $candidate_location = $registry_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, &$readCompilerLoc($candidate_location));
        }

        # Search the default install location. 
        $candidate_location = $default_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, &$readCompilerLoc($candidate_location));
        }

        return @valid_locations;
    };

    my $root_val = sub {
        my $erred = 0;
        my $base_directory = shift;
        my $err_msg, $warn_msg;
        if (!-e "$base_directory\\bin\\HostX64\\x64\\cl.exe"){
            $err_msg = "\n*****************************************************************************\n" .
                  "  Error: Could not find the 64-bit compiler.  This may indicate that the \n" .
                  "         \"X64 Compilers and Tools\" or the Microsoft Windows Software \n" .
                  "         Development Kit (SDK) is not installed.  To build 64-bit MEX-files \n" .
                  "         Microsoft Visual C++ 2017 requires that these two packages are \n" .
                  "         installed properly. \n" .
                  "*****************************************************************************\n";
            $erred = 1;
        }
		
		# Find the SDK location
        my $sdk_location = &$findSDKExec();
		
        if ($sdk_location eq "" || !-e "$sdk_location\\x64\\mt.exe")
		{ 
			$err_msg = "\n*****************************************************************************\n" .
				  "  Error: Microsoft Visual C++ 2017 requires the Microsoft Windows Software \n" .
				  "         Development Kit (SDK), but the SDK cannot be found.  Examine your  \n" .
				  "         Microsoft Visual C++ 2017 installation.\n" .
				  "*****************************************************************************\n";
			$erred = 1;
		}
        
        if (!$erred) {
            $warn_msg = "\n" .
                  "***************************************************************************\n" .
                  "  Warning: MEX-files generated using Microsoft Visual C++ 2017 require\n" .
                  "           that Microsoft Visual Studio 2017 run-time libraries be \n" .
                  "           available on the computer they are run on.\n" .
                  "           If you plan to redistribute your MEX-files to other MATLAB\n" .
                  "           users, be sure that they have the run-time libraries.\n" . 
                  "***************************************************************************\n";
        }

        return ($err_msg, $warn_msg);
    };

# In the case of the VS2015 compiler the link_val key is used to specify
# the location of the SDK

    return {
        "vendor_name"      => "Microsoft Visual C++ 2017",
        "version"          => "",                          #This version is left blank intentionally.
        "group_id"         => "MSVC",
        "serial"           => 15.0,
        "root_var"         => "VSINSTALLDIR",
        "optfile_name"     => "msvc141opts.bat",
        "default_location" => $default_location,
        "language_handled" => \@language_handled,
        "root_val"         => $root_val,
        "link_val"         => $sdk_dir,
        "locate"           => $locate_fcn,
        };
}
1;
