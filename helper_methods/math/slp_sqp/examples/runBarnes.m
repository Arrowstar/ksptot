%% Barnes' 2-DV, 3-constraint explicit example% %  Victor M. Perez, John E. Renaud, and Layne T. Watson%  Adaptive Experimental Design for Construction of Response Surface Approximation%  AIAA JOURNAL Vol. 40, No. 12, December 2002%% Initialize variablesclear; close allvlb = [ 0,  0]; % Design variable lower boundsvub = [75, 65]; % Design variable upper boundsx_feas  = [30, 40]; % feasible initial guess for design variablesx_inf   = [10, 20]; % infeasible initial guess for design variablesOPTIONS.Display = 'iter';OPTIONS.MaxIter = 50;OPTIONS.TolX   = 0.01;OPTIONS.TolFun = 0.001;OPTIONS.TolCon = 1e-4;OPTIONS.TolOpt = 0.005;OPTIONS.MoveLimit = 0.1; % 0.1; feasible % 0.2; % infeasibleOPTIONS.MoveExpand = 1.5;OPTIONS.ComplexStep = 'on';OPTIONS.psd = 'off';tolreg = 1e-2;dispout = @(out) disp(rmfield(out,{'TR','f','g'}));disp(' ')disp('----- Barnes 2-DV, 3-constraint example -----')for x={x_feas, x_inf}   x0=x{:};   options=OPTIONS;%% Schittkowsk's Sequential Quadratic Programming algorithm[xSQP,OPT,LAMBDA] = sqp(@fBarnes,x0,options,vlb,vub);disp(OPT)regression_check( xSQP, [49.5254018, 19.622110369], 'Barnes_sqp',tolreg,@fBarnes );if x0(1)==10, options.TypicalX='center'; end%% SLP Trust Region (filter)disp(' '), disp('SLP filter')options.TrustRegion = 'filter';[xTRf,fTRf,~,outslpf] = slp_trust(@fBarnes,x0,options,vlb,vub);dispout(outslpf)regression_check( xTRf, [49.53771939; 19.63168491], 'Barnes_SLP',tolreg,@fBarnes );% %% SLP Trust Region (merit trust ratio)% options.TrustRegion = 'merit';% disp(' '), disp('SLP merit')% [xTRm,fTRm,~,outm] = slp_trust(@fBarnes,x0,options,vlb,vub);% dispout(outm)%% %% SLP Trust Region (TRAM) Merit% disp(' '), disp('SLP TRAM merit')% options.TrustRegion = 'TRAM-merit';% options.MoveContract = [0.5 0.75];% options.MoveExpand   = [1.5, 2];% options.MPEA='off'; options.QMEA='off';% [xTRAM,fTRAM,~,outTRAMm] = slp_trust(@fBarnes,x0,options,vlb,vub);% dispout(outTRAMm)%% MPEA (filter)disp(' '), disp('MPEA filter')options.TrustRegion = 'filter';options.MPEA='on'; options.QMEA='off';[xmpea,fmpea,~,outmpea] = slp_trust(@fBarnes,x0,options,vlb,vub);dispout(outmpea)regression_check( xmpea, [49.57025749; 19.65730445], 'Barnes_MPEA', tolreg, @fBarnes );%% MPEA (legacy filter)disp(' '), disp('MPEA legacy')options.TrustRegion = 'filter';options.MPEA='legacy'; options.QMEA='off';[xmpea0,fmpea0,~,outmpea0] = slp_trust(@fBarnes,x0,options,vlb,vub);dispout(outmpea0)regression_check( xmpea0, [49.50187816; 19.60348753], 'Barnes_MPEA_legacy', tolreg, @fBarnes );% %% TRAM% if exist('../private/trust_adapt','file')% %    %% MPEA (TRAM filter)%    disp(' '), disp('MPEA TRAM filter')%    options.TrustRegion = 'TRAM-filter';%    options.MPEA='on'; options.QMEA='off';%    [xmpea2,fmpea2,~,outmpea2] = slp_trust(@fBarnes,x0,options,vlb,vub);%    dispout(outmpea2)%    regression_check( xmpea2, [49.3986; 19.5218], 'Barnes_MPEA_TRAM', tolreg, @fBarnes );% %    %% SLP Trust Region (TRAM)%    disp(' '), disp('SLP TRAM filter')%    opts = options;%    opts.TrustRegion = 'TRAM-filter';%    opts.MoveContract = [0.5 0.75];%    opts.MoveExpand   = [1.5, 2];%    opts.MPEA='off'; options.QMEA='off';%    [xTRAMf,fTRAMf,~,outTRAMf] = slp_trust(@fBarnes,x0,opts,vlb,vub);%    dispout(outTRAMf)%    regression_check( xTRAMf, [49.47763329; 19.584019636], 'Barnes_SLP_TRAM',tolreg,@fBarnes );   %    % end%% QMEAQMEAresults = exist('../private/qmea','file');if QMEAresults   %% QMA (filter)   disp(' '), disp('QMA filter')   options.TrustRegion = 'filter';   options.MPEA='off'; options.QMEA='on';   options.debug='on';   options.DerivativeCheck='on';   [xqma,fqma,~,outqma] = sqp_trust(@fBarnes,x0,options,vlb,vub);   dispout(outqma)   options.DerivativeCheck='off';   %% QMEA (filter)   disp(' '), disp('QMEA filter')   options.TrustRegion = 'filter';   options.MPEA='on'; options.QMEA='on';   [xqmea,fqmea,~,outqmea] = sqp_trust(@fBarnes,x0,options,vlb,vub);   dispout(outqmea)   %% QMEA (legacy - filter)   disp(' '), disp('QMEA - legacy - filter')   %options.TrustRegion = 'TRAM-filter';   options.MPEA='legacy'; options.QMEA='on';   [xqmea2,fqmea2,~,outqmea2] = sqp_trust(@fBarnes,x0,options,vlb,vub);   dispout(outqmea2)   options.debug='off';end%% Plot iteration historyfigure % SLPiter=(0:outslpf.iterations);[AX,H1,H2]=plotyy(iter,outslpf.f,iter,abs(max(outslpf.g,[],1)),'plot','semilogy');set(get(AX(1),'Ylabel'),'String','Objective, f(X)');set(get(AX(2),'Ylabel'),'String','Constraint, g(X)');set(H1,'LineStyle','-','LineWidth',1,'Marker','o');set(H2,'LineStyle','-.','LineWidth',1,'Marker','x');xlabel('Iteration #');title('Barnes SLP Iteration History');figure % MPEAiter=(0:outmpea.iterations);[AX,H1,H2]=plotyy(iter,outmpea.f,iter,abs(max(outmpea.g,[],1)),'plot','semilogy'); %#ok<*PLOTYY>set(get(AX(1),'Ylabel'),'String','Objective, f(X)');set(get(AX(2),'Ylabel'),'String','Constraint, g(X)');set(H1,'LineStyle','-','LineWidth',1,'Marker','o');set(H2,'LineStyle','-.','LineWidth',1,'Marker','x');xlabel('Iteration #');title('Barnes MPEA Iteration History');if QMEAresults   figure % QMA   iter=(0:outqma.iterations);   [AX,H1,H2]=plotyy(iter,outqma.f,iter,abs(max(outqma.g,[],1)),'plot','semilogy');   set(get(AX(1),'Ylabel'),'String','Objective, f(X)');   set(get(AX(2),'Ylabel'),'String','Constraint, g(X)');   set(H1,'LineStyle','-','LineWidth',1,'Marker','o');   set(H2,'LineStyle','-.','LineWidth',1,'Marker','x');   xlabel('Iteration #');   title('Barnes QMA Iteration History');   figure % QMEA   iter=(0:outqmea.iterations);   [AX,H1,H2]=plotyy(iter,outqmea.f,iter,abs(max(outqmea.g,[],1)),'plot','semilogy');   set(get(AX(1),'Ylabel'),'String','Objective, f(X)');   set(get(AX(2),'Ylabel'),'String','Constraint, g(X)');   set(H1,'LineStyle','-','LineWidth',1,'Marker','o');   set(H2,'LineStyle','-.','LineWidth',1,'Marker','x');   xlabel('Iteration #');   title('Barnes QMEA Iteration History');endfigure % Objective Historyplot(0:outslpf.iterations,outslpf.f,'r:+'); hold onplot(0:outmpea.iterations,outmpea.f,'g-o');if QMEAresults   plot(0:outqmea.iterations,outqmea.f,'b-.x');   plot(0:outqma.iterations, outqma.f, 'k--s');endylabel('Objective, f(X)');xlabel('Iteration #');title('Barnes Objective Iteration History');legend('SLP','MPEA','QMEA','QMA')hold offfigure % Max Constraint Historysemilogy(0:outslpf.iterations,abs(max(outslpf.g,[],1)),'r:+'); hold onsemilogy(0:outmpea.iterations,abs(max(outmpea.g,[],1)),'g-o');if QMEAresults   semilogy(0:outqmea.iterations,abs(max(outqmea.g,[],1)),'b-.x');   semilogy(0:outqma.iterations, abs(max(outqma.g, [],1)),'k--s' );endsemilogy(0:outslpf.iterations,abs(max(outslpf.g,[],1)),'r+'); semilogy(0:outmpea.iterations,abs(max(outmpea.g,[],1)),'go');if QMEAresultssemilogy(0:outqmea.iterations,abs(max(outqmea.g,[],1)),'bx');endylabel('Max Constraint, g(X)');xlabel('Iteration #');title('Barnes Max Constraint Iteration History');legend('SLP','MPEA','QMEA','QMA')hold offtolreg = 0.1;enddisp('----- Barnes end -----')